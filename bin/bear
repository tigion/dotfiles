#!/bin/bash
#
# Opens or create a note via callback URL with defined
# size and position in Bear, a note app for macOS.

# check
if [ ! -d "/Applications/Bear.app" ]; then
  echo "The required Bear.app is not installed."
  exit 1
fi

command="$1"
parameter="$2"

# encode string for url
# https://gist.github.com/cdown/1163649?permalink_comment_id=4292547#gistcomment-4292547
raw_url_encode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for ((pos = 0; pos < strlen; pos++)); do
    c=${string:$pos:1}
    case "$c" in
      [-_.~a-zA-Z0-9]) o="${c}" ;;
      *) printf -v o '%%%02x' "'$c" ;;
    esac
    encoded+="${o}"
  done
  echo "${encoded}"  # You can either set a return variable (FASTER)
  REPLY="${encoded}" #+or echo the result (EASIER)... or both... :p
}

# create new note with title
create_note() {
  if [[ -z "$1" ]]; then
    echo "Invalid note title!"
    exit 1
  fi
  title=$(raw_url_encode "$1")
  callback_url="bear://x-callback-url/create?title=${title}&open_note=yes&new_window=yes&edit=yes"
}

# open note via id
open_note() {
  id="$1"
  rx="^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}-[A-Z0-9]{5}-[A-Z0-9]{16}$"
  if [[ "$id" =~ $rx ]]; then
    callback_url="bear://x-callback-url/open-note?id=${id}&open_note=yes&new_window=yes"
  else
    echo "Invalid note id!"
    exit 1
  fi
}

# open TODO note via title or create new one
open_todo() {
  callback_url="bear://x-callback-url/open-note?title=TODO&exclude_trashed=yes&open_note=yes&new_window=yes&edit=yes&x-error=bear%3A%2F%2Fx-callback-url%2Fcreate%3Ftitle%3DTODO%26open_note%3Dyes%26new_window%3Dyes%26edit%3dyes"
}

# command switch
if [[ "$command" == "create" ]]; then
  create_note "$parameter"
elif [[ "$command" == "open-note" ]]; then
  open_note "$parameter"
elif [[ "$command" == "open-todo" ]]; then
  open_todo
else
  echo "TODO: Nothing to do"
  exit 1
fi

# open bear via callback url
open "$callback_url"

# set window position and size
osascript <<EOS
  tell application "System Events"
    set appWindow to the front window of application process "Bear"

    -- get size of screen
    get the size of scroll area 1 of application process "Finder"
    set Display to {width:item 1, height:item 2} of the result

    -- set app window to max size
    set position of appWindow to [0, 0]
    set size of appWindow to [the Display's width, the Display's height]

    -- get app window position and size
    set [_w, _h] to the size of appWindow
    set [_x, _y] to the position of appWindow

    -- set final position and size
    set position of appWindow to [_x + 25, _y + 25]
    set the size of appWindow to [550, _h -50]
  end tell
EOS