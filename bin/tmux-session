#!/usr/bin/env bash
#
# Starts one or multiple new Tmux sessions and attach to first one.

# Check arguments
if [[ $# -eq 0 ]]; then
  echo "Usage: $(basename "$0") <session-name> [<session-name> ...]"
  exit 1
fi

# Checks if tmux server is running.
is_running() { tmux run &>/dev/null; }

# Check if the given session exists
is_session() {
  # has-session (alias: has)
  # -t target-session
  tmux has-session -t "$1" 2>/dev/null
}

# Check if the given session is attached.
is_attached() {
  # list-session (alias: ls)
  tmux ls 2>/dev/null | grep -q "^${1}:.*(attached)$"
}

# Checks if we are within a tmux session.
is_in_tmux() {
  [[ -n $TMUX ]]
}

# Checks if a directory exists.
is_directory() {
  [[ -d "$1" ]]
}

# Gets start directory for session.
get_start_directory() {
  # Sets the default start directory
  local default_directory="${HOME}/projects"
  is_directory "${default_directory}" || default_directory="${HOME}"

  # Uses the default start directory if no session name is provided
  if [[ -z "$1" ]]; then
    echo "$default_directory"
    return
  fi

  # Converts session name to lowercase
  # local session_name="${1,,}" # Only works with Bash 4.0+
  local session_name && session_name=$(echo "$1" | tr '[:upper:]' '[:lower:]')

  # Sets the project name
  local project_name="${session_name}"
  # Handles session names that differ from project names
  if [[ "$session_name" == "nvim" ]]; then
    project_name="neovim"
  fi

  # Sets the start directory based on session name
  local start_directory="${HOME}/projects/${project_name}"
  is_directory "${start_directory}" || start_directory="${default_directory}"

  echo "$start_directory"
}

# Sets first session
first_session_name="$1"

# Starts the given sessions
for session_name in "$@"; do
  # Skips existing sessions
  if is_session "${session_name}"; then
    echo "Session '${session_name}' already exists!"
    continue
  fi

  # Creates new session
  echo "Create new session '${session_name}'"
  # new-session (alias: new)
  # -d ... dont attach new session to current terminal (needed to create multiple sessions)
  # -s session-name
  # -c start-directory
  tmux new-session -d -s "$session_name" -c "$(get_start_directory "$session_name")"

  # Waits, hopefully prevents .gitconfig lock error
  sleep .5

  # Runs session/window specific shell commands
  if [[ "$session_name" == "DEV" ]]; then
    # Uses first window for my dotfile project
    tmux send-keys -t DEV:1 "cd dotfiles" Enter
  fi
done

# Attaches to first session
if is_session "${first_session_name}"; then
  echo ""
  if is_attached "${first_session_name}"; then
    echo "Session '${first_session_name}' is already attached!"
    read -r -n 1 -p "Do you still want to attach '${first_session_name}' (y,n)? " answer
    echo ""
    if [[ "$answer" != "y" && "$answer" != "Y" ]]; then exit 0; fi
  fi
  if is_in_tmux; then
    echo "Switch to session '${first_session_name}'"
    # switch to session inside of tmux
    tmux switch -t "$first_session_name"
  else
    echo "Attach to session '${first_session_name}'"
    # attach-session (alias: attach, a)
    # -t target-session
    # -d ... detache other clients
    tmux attach-session -t "$first_session_name"
  fi
else
  echo "Session '${first_session_name}' does not exist!"
fi
