#!/usr/bin/env bash
#
# Starts one or multiple new Tmux sessions and attach to first one.

# check arguments
if [[ $# -eq 0 ]]; then
  echo "Usage: $(basename "$0") <session-name> [<session-name> ...]"
  exit 1
fi

# check if tmux server is running
is_running() { tmux run &>/dev/null; }

# check if session exists
is_session() {
  # has-session (alias: has)
  # -t target-session
  tmux has-session -t "$1" 2>/dev/null
}

# check if session is attached
is_attached() {
  # list-session (alias: ls)
  tmux ls 2>/dev/null | grep -q "^${1}:.*(attached)$"
}

# get first session
first_session_name="$1"

# start given sessions
for session_name in "$@"; do
  # skip existing sessions
  if is_session "${session_name}"; then
    echo "Session '${session_name}' already exists!"
    continue
  fi

  # create new session
  echo "Create new session '${session_name}'"
  # new-session (alias: new)
  # -d ... dont attach new session to current terminal (needed to create multiple sessions)
  # -s session-name
  tmux new-session -d -s "$session_name"
  # wait, hopefully prevents .gitconfig lock error
  sleep .5
done

# attach to first session
if is_session "${first_session_name}"; then
  echo ""
  if is_attached "${first_session_name}"; then
    echo "Session '${first_session_name}' is already attached!"
    read -r -n 1 -p "Do you still want to attach '${first_session_name}' (y,n)? " answer
    echo ""
    if [[ "$answer" != "y" && "$answer" != "Y" ]]; then exit 0; fi
  fi
  echo "Attach to session '${first_session_name}'"
  # attach-session (alias: attach, a)
  # -t target-session
  # -d ... detache other clients
  tmux attach-session -t "$first_session_name"
else
  echo "Session '${first_session_name}' does not exist!"
fi
